@page "/login"
@rendermode InteractiveServer

@inject Blazor_In_Insiders.Services.MongoDbService MongoDbService

<div class="container mt-5" style="max-width: 400px;">
    <h1 class="display-4 mb-4 fw-bold text-primary text-center">Login</h1>

    @if (showSuccess)
    {
        <div class="alert alert-success" role="alert">
            You have logged in successfully!
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="username" class="form-label">Email</label>
            <InputText id="username" class="form-control" @bind-Value="loginModel.Email" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <div class="input-group">
                <InputText id="password" type="@(showPassword ? "text" : "password")" class="form-control" @bind-Value="loginModel.Password" />
                @if (!string.IsNullOrEmpty(loginModel.Password))
                {
                    <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                        @(showPassword ? "Hide" : "Show")
                    </button>
                }
            </div>
        </div>
        <button type="submit" class="btn btn-primary w-100">Login</button>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new();
    private bool showSuccess = false;
    private bool showPassword = false;
    private string? errorMessage = null;

    private async Task HandleLogin()
    {
        errorMessage = null;
        showSuccess = false;
        // Hash password for security
        var passwordHash = Convert.ToBase64String(System.Security.Cryptography.SHA256.HashData(System.Text.Encoding.UTF8.GetBytes(loginModel.Password)));
        var user = await Blazor_In_Insiders.Services.UserLoginService.FindUserLoginAsync(MongoDbService, loginModel.Email, passwordHash);

        if (user == null)
        {
            errorMessage = "Invalid email or password.";
            return;
        }

        showSuccess = true;
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
